name: Release

on:
  push:
    paths:
      - 'Cargo.toml'
    branches:
      - main

jobs:
  build_and_release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: prtgn-linux-amd64
            asset_name: prtgn-linux-amd64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: prtgn-windows-amd64
            asset_name: prtgn-windows-amd64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: prtgn-macos-amd64
            asset_name: prtgn-macos-amd64.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        
      - name: Package artifact
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.artifact_name }}.zip prtgn.exe
          else
            tar -czvf ../../../${{ matrix.artifact_name }}.tar.gz prtgn
          fi
          cd -

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.tar.gz
            ${{ matrix.artifact_name }}.zip
          if-no-files-found: ignore

  create_release:
    name: Create Release
    needs: build_and_release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "version=$(grep '^version' Cargo.toml | awk -F ' = ' '{print $2}' | tr -d '\"')" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          git tag -l | grep -q "v${{ steps.get_version.outputs.version }}" && echo "exists=true" >> $GITHUB_OUTPUT || echo "exists=false" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          files: |
            artifacts/prtgn-linux-amd64/prtgn-linux-amd64.tar.gz
            artifacts/prtgn-windows-amd64/prtgn-windows-amd64.zip
            artifacts/prtgn-macos-amd64/prtgn-macos-amd64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      exclude_windows_x86_64:
        description: 'Exclude Windows (x86_64)'
        required: false
        default: false
        type: boolean
      exclude_windows_aarch64:
        description: 'Exclude Windows (aarch64)'
        required: false
        default: false
        type: boolean
      exclude_debian_x86_64:
        description: 'Exclude Debian (x86_64)'
        required: false
        default: false
        type: boolean
      exclude_debian_aarch64:
        description: 'Exclude Debian (aarch64)'
        required: false
        default: false
        type: boolean
      exclude_fedora_x86_64:
        description: 'Exclude Fedora (x86_64)'
        required: false
        default: false
        type: boolean
      exclude_fedora_aarch64:
        description: 'Exclude Fedora (aarch64)'
        required: false
        default: false
        type: boolean

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get the version from Cargo.toml
        id: get_version
        run: echo "VERSION=$(grep '^version' Cargo.toml | head -n 1 | cut -d '"' -f 2)" >> $GITHUB_OUTPUT

  windows-release:
    runs-on: windows-latest
    needs: get-version
    if: !(github.event_name == 'workflow_dispatch' && github.event.inputs.exclude_windows_x86_64 == true)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: x86_64-pc-windows-gnu

    - name: Build for Windows
      run: cargo build --release --target x86_64-pc-windows-gnu

    - name: Create Windows Installer
      env:
        APP_VERSION: ${{ needs.get-version.outputs.version }}
      run: |
        choco install innosetup
        iscc /DGITHUB_ACTIONS inno.iss

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-windows-installer
        path: Output/prtgn_v${{ needs.get-version.outputs.version }}_x86_64.exe

  windows-release-arm:
    runs-on: windows-latest
    needs: get-version
    if: !(github.event_name == 'workflow_dispatch' && github.event.inputs.exclude_windows_aarch64 == true)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: aarch64-pc-windows-msvc

    - name: Build for Windows (ARM)
      run: cargo build --release --target aarch64-pc-windows-msvc

    - name: Rename exe
      run: ren target\aarch64-pc-windows-msvc\release\prtgn.exe prtgn_v${{ needs.get-version.outputs.version }}_aarch64.exe

    - name: Upload Windows ARM Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-windows-arm-executable
        path: target/aarch64-pc-windows-msvc/release/prtgn_v${{ needs.get-version.outputs.version }}_aarch64.exe

  debian-release:
    runs-on: ubuntu-latest
    needs: get-version
    if: !(github.event_name == 'workflow_dispatch' && github.event.inputs.exclude_debian_x86_64 == true)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install cargo-deb
      run: cargo install cargo-deb

    - name: Build for Debian
      run: cargo deb --output target/debian/prtgn_v${{ needs.get-version.outputs.version }}_x86_64.deb

    - name: Upload Debian Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-debian-package
        path: target/debian/prtgn_v${{ needs.get-version.outputs.version }}_x86_64.deb

  debian-release-arm:
    runs-on: ubuntu-latest
    needs: get-version
    if: !(github.event_name == 'workflow_dispatch' && github.event.inputs.exclude_debian_aarch64 == true)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: aarch64-unknown-linux-gnu

    - name: Install cargo-deb
      run: cargo install cargo-deb

    - name: Install ARM linker
      run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build for Debian (ARM)
      run: |
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        cargo deb --target aarch64-unknown-linux-gnu --output target/debian/prtgn_v${{ needs.get-version.outputs.version }}_aarch64.deb

    - name: Upload Debian ARM Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-debian-arm-package
        path: target/debian/prtgn_v${{ needs.get-version.outputs.version }}_aarch64.deb

  fedora-release:
    runs-on: ubuntu-latest
    needs: get-version
    if: !(github.event_name == 'workflow_dispatch' && github.event.inputs.exclude_fedora_x86_64 == true)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install cargo-rpm
      run: cargo install cargo-rpm

    - name: Build for Fedora (RPM)
      run: cargo rpm build

    - name: Rename RPM package
      id: rename_rpm
      run: |
        set -e
        rpm_path=$(find target/release/rpmbuild/RPMS -type f -name "*.rpm")
        if [ -z "$rpm_path" ]; then
          echo "RPM file not found!"
          exit 1
        fi
        arch=$(basename $(dirname "$rpm_path"))
        new_name="prtgn_v${{ needs.get-version.outputs.version }}_${arch}.rpm"
        new_path="$(dirname "$rpm_path")/${new_name}"
        mv "$rpm_path" "$new_path"
        echo "new_path=$new_path" >> $GITHUB_OUTPUT

    - name: Upload Fedora Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-fedora-package
        path: ${{ steps.rename_rpm.outputs.new_path }}

  fedora-release-arm:
    runs-on: ubuntu-latest
    needs: get-version
    if: !(github.event_name == 'workflow_dispatch' && github.event.inputs.exclude_fedora_aarch64 == true)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: aarch64-unknown-linux-gnu

    - name: Install cargo-rpm
      run: cargo install cargo-rpm
    
    - name: Install ARM linker
      run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build for Fedora (RPM, ARM)
      run: |
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        cargo rpm build --target aarch64-unknown-linux-gnu

    - name: Rename RPM package
      id: rename_rpm_arm
      run: |
        set -e
        rpm_path=$(find target/aarch64-unknown-linux-gnu/release/rpmbuild/RPMS -type f -name "*.rpm")
        if [ -z "$rpm_path" ]; then
          echo "RPM file not found!"
          exit 1
        fi
        arch=$(basename $(dirname "$rpm_path"))
        new_name="prtgn_v${{ needs.get-version.outputs.version }}_${arch}.rpm"
        new_path="$(dirname "$rpm_path")/${new_name}"
        mv "$rpm_path" "$new_path"
        echo "new_path=$new_path" >> $GITHUB_OUTPUT

    - name: Upload Fedora ARM Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-fedora-arm-package
        path: ${{ steps.rename_rpm_arm.outputs.new_path }}

  create-release:
    runs-on: ubuntu-latest
    needs: [get-version, windows-release, debian-release, fedora-release, windows-release-arm, debian-release-arm, fedora-release-arm]
    if: always()
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Windows Installer
      if: needs.windows-release.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: prtgn-windows-installer
        path: prtgn-windows-installer

    - name: Download Debian Package
      if: needs.debian-release.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: prtgn-debian-package
        path: prtgn-debian-package

    - name: Download Fedora Package
      if: needs.fedora-release.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: prtgn-fedora-package
        path: prtgn-fedora-package

    - name: Download Windows ARM Executable
      if: needs.windows-release-arm.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: prtgn-windows-arm-executable
        path: prtgn-windows-arm-executable

    - name: Download Debian ARM Package
      if: needs.debian-release-arm.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: prtgn-debian-arm-package
        path: prtgn-debian-arm-package

    - name: Download Fedora ARM Package
      if: needs.fedora-release-arm.result == 'success'
      uses: actions/download-artifact@v4
      with:
        name: prtgn-fedora-arm-package
        path: prtgn-fedora-arm-package

    - name: Generate release notes
      run: sed 's/<version>/${{ needs.get-version.outputs.version }}/g' RELEASE_TEMPLATE > release_notes.md

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.get-version.outputs.version }}
        name: v${{ needs.get-version.outputs.version }}
        body_path: release_notes.md
        discussion_category_name: Releases
        draft: true
        prerelease: false
        files: |
          prtgn-windows-installer/*.exe
          prtgn-debian-package/*.deb
          prtgn-fedora-package/**/*.rpm
          prtgn-windows-arm-executable/*.exe
          prtgn-debian-arm-package/*.deb
          prtgn-fedora-arm-package/**/*.rpm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Check Cargo Version, Build, and Create Release

on:
  push:
    branches:
      - main

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.check_tag.outputs.TAG_EXISTS == 'false' && steps.get_version.outputs.CARGO_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get cargo version
        id: get_version
        run: |
          CARGO_VERSION=$(yq '.package.version' Cargo.toml)
          echo "Current Cargo version: $CARGO_VERSION"
          echo "CARGO_VERSION=$CARGO_VERSION" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.get_version.outputs.CARGO_VERSION }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "::notice ::Tag v$VERSION already exists. Skipping release."
            echo "TAG_EXISTS=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice ::Tag v$VERSION does not exist. Proceeding with release."
            echo "TAG_EXISTS=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash
      
  build-and-release:
    runs-on: ${{ matrix.os }}
    needs: check-and-release
    if: needs.check-and-release.outputs.tag_name
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_format: tar.gz
            bin_ext: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            archive_format: zip
            bin_ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_format: zip
            bin_ext: ".exe"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Cargo build --release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package executable
        id: package
        run: |
          BIN_PATH=target/${{ matrix.target }}/release/your_binary_name${{ matrix.bin_ext }}
          PACKAGE_NAME=your_binary_name-${{ needs.check-and-release.outputs.tag_name }}-${{ matrix.target }}
          
          if [ "${{ matrix.archive_format }}" == "tar.gz" ]; then
            tar -czvf ${PACKAGE_NAME}.tar.gz -C $(dirname ${BIN_PATH}) $(basename ${BIN_PATH})
            echo "ARCHIVE_PATH=${PACKAGE_NAME}.tar.gz" >> "$GITHUB_OUTPUT"
          elif [ "${{ matrix.archive_format }}" == "zip" ]; then
            zip -j ${PACKAGE_NAME}.zip ${BIN_PATH}
            echo "ARCHIVE_PATH=${PACKAGE_NAME}.zip" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.check-and-release.outputs.tag_name }}"
          name: "Release v${{ needs.check-and-release.outputs.tag_name }}"
          body: "Release generated from Cargo.toml version bump."
          files: ${{ steps.package.outputs.ARCHIVE_PATH }}
          token: ${{ secrets.RELEASER_PAT }}


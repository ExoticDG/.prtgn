name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
        # Optional: Define inputs if you want to pass custom parameters
        inputs:
          logLevel:
            description: 'Log level'
            required: true
            default: 'info'
            type: choice
            options:
            - info
            - warning
            - debug

jobs:
  windows-release:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get the version from the tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: x86_64-pc-windows-gnu

    - name: Build for Windows
      run: cargo build --release --target x86_64-pc-windows-gnu

    - name: Create Windows Installer
      run: |
        choco install innosetup
        iscc inno.iss /DMyAppVersion=${{ steps.get_version.outputs.VERSION }} /DGITHUB_ACTIONS

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-windows-installer
        path: Output/mysetup.exe # Assuming Inno Setup outputs to Output/mysetup.exe

  debian-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get the version from the tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install cargo-deb
      run: cargo install cargo-deb

    - name: Build for Debian
      run: cargo deb --output target/debian/prtgn_${{ steps.get_version.outputs.VERSION }}_amd64.deb

    - name: Upload Debian Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-debian-package
        path: target/debian/prtgn_${{ steps.get_version.outputs.VERSION }}_amd64.deb

  fedora-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get the version from the tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install cargo-rpm
      run: cargo install cargo-rpm

    - name: Build for Fedora (RPM)
      run: cargo rpm build

    - name: Upload Fedora Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prtgn-fedora-package
        path: target/release/rpmbuild/RPMS/*/*.rpm

  create-release:
    runs-on: ubuntu-latest
    needs: [windows-release, debian-release, fedora-release]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get the version from the tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Download Windows Installer
      uses: actions/download-artifact@v4
      with:
        name: prtgn-windows-installer

    - name: Download Debian Package
      uses: actions/download-artifact@v4
      with:
        name: prtgn-debian-package

    - name: Download Fedora Package
      uses: actions/download-artifact@v4
      with:
        name: prtgn-fedora-package

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref }}
        draft: true
        prerelease: false
        files: |
          prtgn-windows-installer/mysetup.exe
          prtgn-debian-package/prtgn_${{ steps.get_version.outputs.VERSION }}_amd64.deb
          prtgn-fedora-package/*.rpm
      env:
        GITHUB_TOKEN: ${{ secrets.AUTO_RUN_SECRET }}
